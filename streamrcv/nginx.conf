daemon off;
worker_processes auto;
user root;

events {
    worker_connections  1024;
}

rtmp {

    # external-facing RTMP server that calls ffmpeg (via encode.sh) for each connected client,
    # which transcodes to 720p and writes to the internal HLS splitter server (see below)
    server {
        listen 1935;
        chunk_size 4000;

        application publish {
            live on;

            # check auth (via assumed sauth container) before allowing publishing
            notify_method get;
            on_publish http://sauth:1930/auth;

            # HLS (rightly) removes old segments.
            # this should preserve the entire recording, as it exists.
            record all;
            record_suffix src.flv;
            record_path /var/lib/streamrcv/data/rec;
            record_unique on;

            # ref: https://stackoverflow.com/questions/38765115/nginx-rtmp-module-receive-x-264-output-hls-live-stream#44685873
            exec /usr/local/bin/encode $app $name;
        }
    }

    # internal rtmp server that does HLS splitting/variant/master generation.
    # writes all files to the /hls/ path
    server {
        listen 1936;
        chunk_size 4000;

        application m3u8 {
            live on;
            wait_video on;
            drop_idle_publisher 5s;

            hls on;
            hls_continuous on;
            hls_path /var/lib/streamrcv/data/hls/;
            hls_fragment 5;
            hls_playlist_length 60;
                        
            hls_variant _720p BANDWIDTH=2048000;
        }
    }
}

http {
    sendfile off;
    tcp_nopush on;
    directio 512;

    default_type application/octet-stream;

    # serves the actual master/variant/segments generated by the HLS splitter
    server {
        listen 8080;
        
        location / {
            root /var/lib/streamrcv/data;
            
            add_header 'Cache-Control' 'no-cache';
            
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length';

            # allow CORS preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain charset=UTF-8';
                add_header 'Content-Length' 0;
                return 204;
            }

            types {
                text/html html;
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
        }
    }
}